Js의 함수는 기본적으로 매개 변수 외 arguments 객체와 this 를 전달받는다.
타 언어와의 차이점은 this 에 할당되는 객체가 동적으로 달라지는 차이가 있다.
* 렉시컬 스코프와 헷갈리지 않기를 바랍니다.
렉시컬 스코프 : 함수에서 사용하는 변수가 가장 가까이 있는 변수를 참고하는 것

함수의 호출 방식에 따라 this에 바인딩 할 객체가 동적으로 결정된다. 대표적으로 네가지 방법이 있다
1. 함수 호출
  this는 클라이언트에서는 window, 서버에서는 global 객체를 의미한다.
  기본적으로 this는 전역 객체에 바인딩되고
  콜백 함수도
  메소드의 내부 함수도
  전역객체를 바인딩한다.

  일반적으로 함수를 호출 한 경우 this 는 해당 객체를 말한다. 하지만 내부함수는 일반함수, 메소드, 콜백함수 위치 상관없이 전역객체를 바인딩한다.
  이 현상을 방지하기 위해 상위에서 this를 변수에 할당하고 그 값을 사용한다.

메소드가 뭔가?
메소드가 뭐고 함수가 뭐고?
2. 메소드 호출
  함수가 객체의 프로퍼티 값이면 메소드로 호출된다. 메소드 내부의 this는 메소드를 소유한 객체에 바인딩된다.
  let test = { name: 'js', testName : function(){ consol.log('help me, ', this.name) } };
  프로토타입 또한 비슷하게 동작한다.

3. 생성자 함수 호출
  js 생성자 함수는 단순히 객체 생성 역할을 한다
  let me = new Person('Kim');
  console.log('me');    // Person : { name : Kim };

  let you = Person('Park');
  console.log(you);   // undefined;

  생성자 함수에 new 연산자를 붙이지 않고 호출하면 별 차이는 없지만 생성자 함수로 동작한다. 하지만 this의 바인딩 방식이 다르기 때문에 생각없이 사용하면 오류가 발생할 수 있다. 일반 함수를 호출하면 this는 전역 객체에 바인딩 되지만 new 연산자와 함께 호출하면 새로 생성된 빈 객체에 바인딩된다.
  
  * 객체 생성의 객체 리터럴 방식과 생성자 함수의 차이
    Prototype 객체의 차이에 있다.
    객체 리터럴은 Object.prototype,
    생성자 함수는 Customone.prototype 으로 생성된다.

4. apply / call / bind
  임의로 this 를 특정 객체에 명시적으로 바인딩하는 방법이다.
  Function.prototype.call
    func.apply(target, [args])
    // target : 함수 내부의 this에 바인딩 할 객체
    // args : 함수에 전달할 arguments의 배열
  Function.prototype.apply
    func.apply(target, alpha, beta, gamma, ...)
    // target: 상동
    // alpha, beta, gamma, ... 위에서 배열로 넘기던것을 인자 하나씩 넘김
  Function.prototype.bind
    콜백에서 사용
    func.prototype.initSomething = function(callback) {
      if (typeof callback == 'function') {
        callback.bind(this);
        // callback.call(this);  이것도 가능하다,
      }
    }