어디서 오류나 가는지 빠른 캐치 가능
재설계 시간 단축, 보수 할때 편하게 가능

노드 일단 설치를 해주시고
node -v

사용할 라이브러리
Express   API
Mongoose    MongoDB
Jest    단위 테스트
node-mocks-http   단위 테스트
supertest   통합 테스트

-d 로 설치

npm install express mongoose
npm i jest supertest node-mocks-http -D

단위 테스트의 조건
1 독립적이어야 하며 어떤 테스트도 ㅏㄷ른 테스트에 의존 하지 않아야 한다
2. 격리되어야 함ajxa, axios localstorage 등테스트 대상이 의존하는 것을 다른 것으로 대체 해야 함.

왜 테스트를 하는지
프로그램이 크고, 메모리가 많이 들고, 다른 리소스등이 필요할경우
로컬 환경에서 코드 실행시키기 어려움
이런 프로그램 개발하는 개발자는 유닛테스트를 만들어서정상작동하는지 확인
- 종속성 있는 다른 클래스들에서 버그가 나는것을 방지하기 위함
  A 에서 버그가 나는줄 알았는데 Common Class 에서 나오는 에러였음 등등
  어디서 에러가 발생하는지.... 서로 연관된 버그 잡기 빠르게 해결가능

== Jest
1. 라이브러리 설치
2. Test 스크립트 변경 "test" : "jest" or "jest --watchAll"
3. 테스트 작성할 폴더 및 파일 기본 구조 생성

Jest 가 Test 파일을 찾는 방법
Trying to Find -{filename}.test.js
               -{filename}.spec.js
               -All file inside "test" folders      // 폴더 안에있는거 찾음

여기서는 구조를
  단위 테스트 폴더(Unit Test)  => 단위 테스트 파일 <대상 이름>.test.js
  통합 테스트(Integration Test) => 통합 테스트 <대상 이름>.test.int.js


Jest 파일 주고

  describe
    test(it)
    test(it)
    test(it)

"describe"    argument (name, fn)
  - 여러 관련 테스트를 [그룹화]하는 블록을 만듭니다.
"it" same as test    argument (name, fn, timeout)
  - [개별 테스트]를 수행하는 곳. 각 테스트를 작은 문장처럼 설명함
[example]
  Describe(과일)
    it 사과
    it 바나나...


그럼 이거는 큰 프로젝트라서
로컬에서 직접적으로 실행해볼수 없기 때문에 이렇게 사용을 ㅎ나다?
[Explain]
  "expect"
    expect 함수는 테스트 할 때 마다 사용
    expect 함수는 혼자서 사용되지 않으며 matcher 와 함께 사용
  "matcher"
    [다른 방법]으로 값을 테스트하도록 매처를 사용함

[example]
이게 하나의 test case 이고 뭉쳐서 describe 에다가 넣어주면 됨
  test('two plus two is four', () => {
    expect (2+2).toBe(4);       => toBe = matcher
  });


jest.fn() 다른 부분에 의존되지 않기 위해 사용?

Mock 함수를 생성하는 함수. 모의... 가짜 흉내내는 그런 뜻이래요
하는 일은 단위 테스트를 작성 할 때 해당 코드가 의존하는 부분을 가짜로 대체하는 일을 해줌

왜 독립적?
의존적인 부분을 구현하기가 까다로울 경우가 잇고
테스트하고자 하는 부분의 테스트 결과가 영향을 바을수도

예를 들어 데이터 베이스 데이터를 저장하는 경우
io작업, 트랜잭션, 쿼리 전송 등등 테스트 결과에 영향을 미침
  => 너무 많은 작업이 생김

그래서 단위 테스트는 특정 기능만 분리해서 독립적으로 사용
함수에 어떤 일이 발생 했는지. 다른 코드들에 의해서 어떻게 호출되는지 기억 할 수 있음
내부적으로 어떻게 사용되는지도

json.fn() 기본 사용법
  Mock 가자 함수 생성
    const mockFunction = jest.fn();

  가짜 함수 호출 인자를 넘겨서도 호출 가능
    mockFunction()
    mockFuncton('hello')      // 인자를 넘겨서 호출 가능

  가짜 함수가 어던 결과값을 반환 할지 직접 알려주기도 가능
    mockFunction.mockReturnValue('가짜 함수')
    // mockReturnValue 메소드를 이용해서 반환 값을 지정
    console.log(mockFunciton)   // 가짜 함수 반환

  가짜 함수가 몇번 호출되고 어떤 인자가 넘어왔는지 검증
    mockFunction('hello');
    mockFunciton()

    expect(mockFunciton).toBeCalledWith('hello')
    expect(mockFunction).toBeCalledTimes(2)


create => read => update => delete

[CREATE test]
  (1) 해야 할일? DB에 product 를 저장하는것, 그중에 product 를 저장하기 위한 함수 생성
  단위 테스트 작성 => unit/product.test.js
  테스트에 대응하는 실제 코드 작성 => controller/producet.js

  test.js 파일에 작성
    작성하지 않은것을 예상을 하면서 테스트 코드에서 작성을 하기 때문에... 헷갈릴수도
    성공을 위한 코드를 작성하는건가??? 이거 왜 하는거임?

  (2) Create Method 
    해야 할일? createProduct 함수 호출 시 Product Model 의 create 메소드가 호출되는지 확인
    단위테스트 작성 => it (~, () => { ~ expect().toBe~() });



몽구스 warning 제거
  jest 기본 환경은 test 환경 => jsDom
  mongoose 는 jsDom 지원하지 않음
  jsdom => node 로 벼환해야함
    jest.config.js 파일 생성
    module.expots = {
      testEnvironment: "node"
    }

[CREATE TEST3] node-mocks-htp
  (1) 해야 할일?? Product.create() 저장할 product 데이터를 넣어주지 않음
    데이터베이스에 저장할 데이터를 넣어줌
  (2) 단위 테스트 작성
    몽구스 모델 사용해서 데이터 저장시
      Product.create => Product.create(req.body)
      이런식으로 req.body 사용하니까 단위테스트에서도 req 필요
    그러면 어떻게 req 객체를 테스트에서 이용함? => node-mocks-http 사용
    라우팅 함수를 테스트하기 위한 http 객체 얻는 방법
      req = httpMocks.createRequest();
      res = httpMocks.createResponse();
    req 객체얻으면 req.body 안에 넣어줄 product 넣어주기
      req.body = newProduct;  // 이걸 만들어서....
      productController.createProduct(req, res, next)
    expect 와 matcher 통해서 데이터베이스에 데이터가 되는 부분 코드 테스트
      req.body = newProduct;
      productController.createProduct(req, res, next);
      expect(Product.create).toBeCalledWith(newProduct);

  실제 대응 코드 작성  controller/product.js
    exports.createProduct = (req, res, next) => {
      Product.create(req.body);
    }
  
* beforeEach
  여러개의 테스트에 공통된 code 가 있으면 beforeEach를 통해 반복 줄임
    여기서는 공통적으로 httpMocks 필요
    beforeEach (() => {
      req=  httpMocks.createRequest();
      res = httpMockds.createResponse();
      next = null;
    });

상태 값 전달
[CREATE 4 상태값 전달]
  (1) 해야 할일? => 데이터베이스 저장했으니 결과값을 클라이언트한테 전달, 상태 결과값을 보내줌
  (2) 단위 테스트 작성 => 성공적으로 create 하면 201 status 를 res 로 반환
    expect(res.statusCode).toBe(201)
  (3) 테스트 대응 실제 코드 작성 controller/product.js
    Product.create(req.body);
    res.status(201)

[ 결과값 전달2 데이터 전달]
  (1) 해야 할 일? => 결과값 전송 확인
  (2) 단위 테스트 작성 => 결과값 전송 확인은 isEndCalled 로...
    expect(res._isEndCalled()).toBeTruthly()
    _isEndCalled 이거는 httoMocks 디펜던시에 있는 메소드임
  (3) 테스트 대응 실제 코드 작성 controller/product.js
    Product.create(req.boy);
    res.status(201).send();

  
[CREATE 5 response results back]
  (1) 할일? => 새로 생성된 데이터 결과값 보냄
    const createdProducet = Product.create(req.body);
  (2) 단위테스트 작성 => 가짜 함수가 어떤 결과를 반환할지 직접 알려줄때는 mockReturnValue 를 사용
    Product.create.mockRetrunValue newProduct();
    productController.createPRoduct(req, res, next);
    expect(req._getJSONData())toStrickEqual(newPRoduct);
  (3) 테스트 대응 실제 코드 작성 controller/product.js
    const createdProduct = Product.create(req.body);
    res.status(201).json(createProduct);

[CREATE 에러 처리]
  포스트맨 사용
  개발한 api 테스트, 공유 api 개발 생산성높임
  api 요청을 전달하는 클라이언트가 없어서 요청을 임의로 전달하기 위해 사용
  
  근데 요청값에 필수값이 빠지면 에러가 발생할건데 그거 테스트

Promise {<pending>} 으로 찍히는 이유는?
Product 데이터를 저장시 비동기로 하기 때문에 호출당시 미결상태임
해결방법은?
  결과값을 받은 이후에 값을 처리해주면 됨
  두가지 방법이 잇는데
  .then()
  async await 가 있음 둘다 똑같은건데 문법적으로 다른거임
  잘 아는거고...

단일 테스트에도 비동기 적용을 해줘야 함


필수 항목에서 값이 없으면 request 에서 hang 이 걸림
= 에러 처리를 위한 단위 테스트 작성
  (1) 해야 할일? => 데이터 저장 시 에러가 나면 에러 처리하는 부분 구현
  (2) 단위 테스트 작성
    const errorMessage = {message: "description properry Missing"};
    const rejectedPromise = Promise.reject(errorMessage);
      비동기 요청에 대한 결과
        성공: Promise.resolve(value) => then 메소드를 통해 처리 가능
        에러 Promise.reject(reason)
    ~
    expect(next).toBeCalledWith(errorMessage);


[통합 테스트 Integration Test]
통합 테스트 : 모듈을 통합하는 단계에서 수행하는 테스트
단위 테스트에서 모듈 작동 확인하면 모듈들을 연동하여 테스트 수행, 이런거를 통합테스트라 함
수행 이유?
  모듈의 상호 작용 검증
  통합 과정 발생 오류 확인
Supertest 무엇?
  nodejs 의 http 서버를 테스트하기 위해 만들어진 모듈
  supertest 모듈을 이용해 통합 테스트를 쉽게 구현 가능

jest 말고 supertest 사용
const request = require('supertest')

[Create 통합 테스트]
에러 처리를 위한 통합 테스트
  (1) 할일? => Product 데이터를 DB 에 넣기
  (2) 통합 테스트 작성
  (3) 이미 작성된 실제 코드?


Express 에러 처리
  미들웨어에서 에러 발생하면 에러처리기 Handler 로 보내줌
  에러 처리기로 바로 가야하기 때문에 아래있는 항목은 바로 넘어감
  에러 처리기는 4개의 인자가 들어감
  app.use((error, req, rese, next) => { res.json({message: error.message})})
    그래서 첫번째 미들웨어에서 발생한 에러메시지를 이곳에서 처리함
  근데 비동기일 경우 이렇게 처리하면 에러 메시지를 못받아서 Crash 됨
    그래서 에러를 next인자에다가 넣어주면 error 핸들러로 보내줄 수 있음. next(err) 이렇게

= 하나씩 테스트 하기 위한 익스텐션
VSCODE => Jest runner 설치하면 위에 뜸
원하는 함수만 테스트 가능

[READ]
  이제는 create 에 대한 복습하는 정도라서 빨리 갈거임
  (1) 할일? => DB product 데이터 가져옴. 가져오기 위한 함수 생성
  (2) 단위테스트 작성 => test/unit/product.test.js
  (3) 테스트에 대응하는 실제 코드 작성 => controller/product.js
    exports.getProducts = async (req, res ,next) => { await Product.find({}); }
  여기서 이제 에러가 나기 시작하는데 이유는 create 에서는 mock function/ jest.fn() 을 사용해서 추적을 했기때문에 가능했는데
  언제 콜이 되고 어떤것과 콜이되는지 관찰을 해주고 있어서 테스트가 가능한건데
  find 는 그렇게 설정을 안해줌
  그래서 또 설정을 해주자면 productModel.find = jest.fn() 만든 후 사용

[READ 2]
  (1) 할일 => DB 에서 product 가져오기 성공 시 성공 status(200) 전달
  (2) 단위 테스트 작성 => res.statusCode toBe(200)
  (3) 대응하는 실제 코드 작성 => await productModel.find({});...
[READ 3]
  (1) 할일 => DB 에서 가져온 product 데이터를 클라이언트에 전달
  (2) 단위 테스트 작성 => expect(res._getJSONData()).toStrictEqual(data)
  (3) 대응 실제 코드 작성 => res.status(200).json(data)
[READ 에러 처리]
  (1) 할일 => product 데이터 가져올때 에러 나면 맞는 에러 처리
  (2) 단위 테스트 작성 => err/rejectMessage ~ expect(next).toHaveBeenCalledWith(errorMessage)
  (3) 실제 코드 작성 => next(err)

[get Product 통합 테스트 작성]
  작성된 코드들에 대응하는 코드 작성
  
  toBeDefined => 변수가 undefined 가 아닌지 체크
  toBeTruthly =>  value 가 true/false 인지 확인


현재까지는 모든 데이터를 가져왔는데 이제는 단일 데이터를 불러와볼겁니다
[get Product By Id]
1. 함수정의
2. 함수 호출 시 param 과 함께 호출
3. 가져 온 값을 return
4. 값 없으면 404 에러 호출
5. 에러 처리 (어떤 이유든 간에)
6. 통합 테스트 작성
  -1 라우터 작성
  통합 테스트는 전체를 한번에 돌려요 그냥 개별로 하지 말고
  -2 해당하는 아이디 값이 없을때 테스트 작성

[UPDATE]
함수 정의
findByIdAndUpdate 메소드 호출
  넣어 줘야 하는 인자, req.params.productId, req.body, {new: true} =업데이트 이후 업데이트 상태값을 리턴해주는 몽고의 옵션인듯

업데이트 정상적으로 완료
업데이트 갑 없음
업데이트 시 에러

통합테스트 시작
데이터가 없을때의 통합테스트

[DELETE] Product 삭제
1. 함수 생성
2. 함수 호출 시 findByIdAndDelete 메소드 호출
3. 업데이트 이후 삭제 성공 상태와 삭제된 데이터 클라이언트 전송
4. 삭제할 데이터를 찾지 못한 경우