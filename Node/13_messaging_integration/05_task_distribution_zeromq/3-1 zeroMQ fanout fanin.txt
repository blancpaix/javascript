-03-01 ZeroMQ fanout/Fanin 패턴
  P2p 분산 아키텍터 구축하기 zeroMQ 일부 기능 사용
  PUB/SUB 소켓 사용, 단일 메시지를 여러 소비자에게 배포 했엇음
  여기서는 PUSH/PULL 소켓 쌍을 사용해 병렬 파이프라인 구축

  = PUSH/PULL 소켓
    PUSH : 메시지 보내기
    PULL : 메시지 받기
    단방향 통신 시스템 구축에 완벽한 몇가지 추가 기능
    -메시지는 항상 push => pull 로 이동
      바인드 모드 : 작업 생산자 및 싱크와 같은 내구성이 잇어야 하는 노드에 적합
      연결 모드 : 작업자와 같은 임시 노드에 적합  => 노드에 영향을 주지 않고 임시 노드의 수 임의 변경 가능
    -PUSH 소켓에 여러개의 PULL 소켓 연결 시 모든 메시지는 고르게 분배 (로드밸런싱 p2p)
      여러 PUSH, PUll 하나 : 공정 대기열 시스템으로 메시지 처리 (라운드 로빈)
    -PULL 소켓 없는 PUSH 소켓에서 발생된 메시지는 손실되지 않음, 노드 온라인 될때까지 대기열에 추가됨

  = ZeroMQ 로 분산 해시썸 크래커 만들기
    PUSH/PULL 확인, 샘플 어플 만들거임

    해시섬 크래커 : 무차별 대입 방시긍로 주어진 알파벳의 가능한 모든 변형들에서 해시썸을 구하면서 원래 문자열을 찾는 시스템임
    병렬 파이프 라인을 구현하고자 함
      -1. 작업자를 생성하고 여러 작업자에게 배포하는 노드
      -2. 다중 작업자 노드(실제 계산)
      -3. 모든 결과를 수집하는 노드

      1. 변형생성기(벤틸레이터) (PUSH)  => PULL 2.작업자 PUSH  =>> PULL 3. 결과 수집자 (싱크)
                                      => PULL 2. 작업자 PULL =>>

    벤틸레이터가 주어진 문자 변형 간격을 생성 (aa ~ bb : aa ab ba bb)
    간격을 작업을 만들어 작업자에게 분배
    작업자는 모든 변형에 대한 해시썸을 계산, 일치 여부를 판별
    일치하는 항목이 있으면 결과가 결과 수집기 노드(싱크)로 전송됨

    내구성 잇는 노드 : 벤틸레이터, 싱크
    일시적 노드 : 작업자
    작업자는 PULL 소켓을 벤틸레이터에 연결, PUSH 소켓을 싱크에 연결하면 벤틸이나 싱크에서 매개변수 수정 안하고도 원하는 수의 작업자 시작 중지 가능

  = 생성자 구현
    n 항 트리를 사용할 거임
    각 노드에 정확히 n 개의 자식 트리가 있음, 각 자식은 알파벳 n 개 요소 중 하나
    각 노드에서 너비 우선 순서로 색인을 할당
    * 트리 이미지는 613 페이지 참조
    트리 검색을 할건데 이거 그냥 라이브러리 쓰자, indexed-string-variation 패키지
    작업은 작업자에서 수행, 벤틸레이터 할일: 작업자에게 제공할 인덱스 범위를 생성하는것
    generateTask.js ㄱㄱㄱ
  

