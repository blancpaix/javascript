메시지 대기열의 간으한 대안 : 스트림
메시징에 대한 접근방식이 좀 다름
Redis Stream 을 사용해볼거임 => 스트림의 힘을 느껴보아라

= 스트링 플랫폼의 특징
  스트림/log 는 순서가 지정되고 추가전용인 영구적 데이터 구조
  레코드 메시지 : 항상 스트림의 끝에 추가, 큐와 달리 소비할 때 삭제 안됨
  이 특성이 스트림을 메시지 브로커보다는 데이터 저장소와 유사하게 만듦
  데이터 저장소와 마찬가지로 스트림은 질의를 통해 과거 레코드 검색 / 특정 레코드에서 시작하여 재생 가능

  레코드를 소비자가 가져옴 => 자신이 처리할 수있을 만큼만 데이터를 가져와 처리,,, 소비자가 압도당하지 않음

  데이터가 손실되지 않음, 안정적인 메시지 전달 구현 가능
  장애 발생시 그냥 중단된 시점부터 스트림 읽기 시작하면 됨

  오류 발생 시 레코드가 남은 지점부터 레코드 처리,
  매우 단순하고 기본적, 메시지 손실 방지에 매우 효과적


= 스트림 대 메시지 대기열
  메시지 대기열, 스트림 대기열 많은 유사점 있지
  언제? 메시지 대기열으 ㄹ사용하고 메시지 스트림을 쓸까??

  스트림 : 메시지 일괄 처리 방식으로 처리 | 과거 멧지ㅣ으 ㅣ상관관계를 찾ㅇ야 할수도있는 순처적 데이터  처리
  최신 스트리밍 플랫폼의 GB/s 데이터 수집하고 데이터 분산하여 어러 노드에서 데이터 처리 가능

  메시지 대기열, 스트림 : 데이터 전달 신뢰성 보장 케이스라도 pub/sub 패턴 구현에 사용 가능
  메시지 대기열은 구급 메시지 라우팅을 제공, 서로 다른 메시지에 우선순위 부여 가능 => 복잡한 시스템 작업 통합하는데 적합
  스트림은 순서가 항상 유지됨
  큐가 적절하게 쓰인답니다.

=Redis Streams 를 사용한 채팅 앱 구현
  Kafka, Amazon Kinesis, 보다 더 간단하게 Redis Streams`라는 log 데이터 구조 구현
  이점 : 채팅방 메시지의 기록을 저장하고 검색하기 윟나 전용 컴포넌트에 의존할 필요 없이 필요할때마다 스트림에 질의 가능
  아키텍처 단순화, 매우 간단한 사용 사례에서는 스트림이 메시지 큐보다 더 좋음 ㅎㅎㅎ
  일단 해봅시다