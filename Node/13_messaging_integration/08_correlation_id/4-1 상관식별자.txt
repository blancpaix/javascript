 -04-1 상관 식별자
  첫번째 요청/응답 패턴 : 상관 식별자
  단방향 채널 위 요청/응답 추상화를 만들기 위한 기본 블록

  각 요청을 식별자로 표시, 수신자에 의해 응답 res 에 첨부됨.
  요청 전송자가 두 메시지를 상호 연결하고 응답을 적절한 처리자에게 반환
  단방향 비동기 채널에서 어느 "방향"으로 이동하든 상관없음

  상관 관계 ID 를 사용해 각 응답이 다른 순서로 전송되고 수신되는 경우에도 각 응답을 적절한 요청과 매칭 시킴

  -상관관계 식별자를 사용하여 요청/응답 의 추상화 구현
    예제를 만들어 봅시다
    점대점이면서 전이동(fully duplex: 메시지가 양방향으로 이동가능)

    Ex) Websocket, 서버와 브라우저간 점대점 연결, 메시지는 모든 방향으로 이동 가능
    child_process.fork() 를 사용해 자식 프로세스가 생성될때 생성되는 통신 채널
    이 채널은 부모를 자식 프로세스와만 연결, 메시지를 몯느 방향으로 이동가능 => 비동기식, 점대점 및 전이중 방식
    !! 가장 기본적인 채널임

    부모 프로세스와 자식 프로세스 사이에 생성된 채널을 감싸기 위한 추상화 만들기
      추상화 : 각 요청을 상관 식별자로 자동 표시, 등답 대기중인 요청 핸들러 목록에서 수신한 응답의 ID 로 매칭시켜 d요청/응답 통신 채널 제공
    
    부모 프로세스는 child.send(message) 로 자식에게 메시지 보냄
    child.on('message', callback) 메시지 받음
    자식 프로세스는 process.send(message)로 부모에게 메시지 보냄
    process.on('message', callback) 으로 메시지 받음
    => 인터페이스 채널이 동일, 양쪽 끝에서 사용가능한 공통의 추상화 만들기 가능

 -요청의 추상화
  새로운 요청 보내는 부분 고려, 추상화 구현, createRequestChannel.js


node requestor.js 이거 실행하면확인 가능함 출력도 보고
  응답이 전송 또는 수신 순서와 관계 없이 해당 요청과 올바르게 연결됨을 확인 가능함
  단대단,,, 1:1 채널이 있을때 훌륭하게 동작
  다중 채널이 있는 대기열은 복잡한 아키텍처가 있다면 어떻게 할???
  이거는 다음에 보겠습니다.