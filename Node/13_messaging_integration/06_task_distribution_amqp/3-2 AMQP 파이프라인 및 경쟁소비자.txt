-03-2 AMQP 파이프라인 및 경쟁소비자
  점대점 p2p 통신, 경쟁 소비자
  p2p 구성에서 파이프라인은 상상하기 매우 간단함
  중간에 메시지 브로커를 사용함녀 시스템의 노드간 관계를 이해하기 조금 더 어려움
  브로커 자체가 통신의 중개자 역할, 누가 연결될지 알지 못함
  eX) AMQP 사용 메시지 보낼때 메시지를 대상으로 직접 전달 안함,
  익스체인지로 전달한 다음 대기열로 전달
  브로커는 익스체인지, 바인딩 및 대상 큐에 정의된 규칙에 따라 메시지를 라우팅 할 위치 결정

  AMQP 시스템으로 파이프라인 및 작업 분배 패턴 구현 = 각 메시지가 한명의 소비자만 수신하도록해야함...
  익스체인지가 둘 이상의 대기열에 바인딩 될 경우 이를 보장할 수 없음
  해결책 : 익스체인지를 모두 우회, 메시지를 대상 큐에 직접 보내는것
  하나의 큐만 메시지를 수신하도록 할 수있음 => P2P 패턴이라 함, point to point

  메시지들을 단일 대기열에 직접 보낼 수 있게 되면 이미 작업 배포 패턴의 절반을 구현한것과 달므 없음
  여러 소비자가 동일한 경우 대기열에서 수신대기하는 경우 메시지는 팬아웃 배포 패턴에 ㄸ라ㅏ 메시지 균등하게 배포 == 경쟁 소비자 패턴

  AMQP로 해시ㅆ머 다시 구현할겨

= AMQP 를 사용한 해시섬 크래커 구현
  익스체인지 : 메시지가 일련의 소비자들에 멀티캐스트 되는 브로커 지점,,, ! 여기서는 없음
  큐 : 메시지가 로드밸런싱 되는 장소... (작업 대기열의 경우)
  생성자 => 작업 대기열( 로드밸런싱 ) => [작업자 1,2] => 결과 대기열 => 결과 수집자
  브로커에 큐들이 들어가잇꼬 작업 결과 대기열이 왔다 갔다 함....

  일련의 작업 여러 작업자로 분산 하려면 단일 대기열이 필요 (작업 대기열)
  그 뒤에는 경쟁 소비자, 작업자 집합 존재, 작업은 서로 다른 작업자에게 병렬로 실행
  
  전체 아키텍처에서는 어떤 익스체인지도 사용하지 않고 메시지를 대상 큐로 직접 전송, P2P 통신 구현할거임

  
  잘 돌아가유

= TIP
  AMQP 기반 해시섬 크래커의 새로운 버전은 모든 작업을 실행하고 ㅇ리치하는 항목을 찾는데 약간 더 걸림....
  브로커가 부정적 영향을 줄 수있는 실제 사례
  ZeroMQ 에 비해 많은것을 바로 사용 가능하다는 장점이 있지...
  AMQP 작업자가 충돌해도 처리중인 메시지 손실 안됨, 다른 작업자에게 전달됨

  어플 사용할 올바른 접근 방식을 선택하는데 크게 보고 접근해야 함....
  기능 부족한거랑 복잡성이 증가하는거랑은 별개임 ㅎㅎㅎ
  