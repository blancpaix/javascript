복잡한 아키텍처
공용 네트워크에 노출하는 경우, 역방향 프록시를 사용하는것이 필수...
  외부 어플이 쉽게 사용하고 신뢰 할 수잇는 단일접근 포인트 제공, 복잡성을 숨기는데 사용
내부용으로만 서비스를 확장해야 할 경우 더 많은 유연성과 제어를 가지고 움질일 수 있음

서비스 B가 여러머신에 분산되어 확장, 내부네트워크에섬나 사용. B에 의존한 서비스 A
=> A 가 로드벨런서를 통해 서비스 B 연결, B서비스 가능한 모든 서버에 트래픽 분산...
===================================================================================
다른 대안으로는 로드밸런서를 제거하고 A에서 직접 요청을 배포할 수잇지... 이게 그냥 로드밸런서 아닌가??.. 뭐지
!! 서비스 A 가 서비스 B 를 노출하는 서버에 세부 정보를 알고 잇는 경우에만 가능

장점 : 병목현상이나 단일한 장애 지점없이 실제로 분산된 통신을 간으하게 하는 매우 간단한 패턴
- 네트워크 노드를 제거, 인프라 복잡성 감소
- 메시지가 하나의 노드를 통해 이동, 더 빠른 통신 가능
- 로드 밸런서가 처리할 수잇는 성능에 따라 제한이 안됨 => 확장성 개선

단점 : 로드밸런서를 제거해 실제 기본 인프라의 복잡성이 드러남...
  각 클라이언트는 로드밸런싱 알고르딤을 구현하고 인프라에 대한 정보를 최신 상태로 유지하는 방법을 써야 더 잘 동작함


= 여러 서버에 요청을 분살할 수있는 HTTP 클라이언트 구현


