REST : 웹의 장점을 최대한 활용할 수 있도록 고안된 아키텍처
  리소스 상태에 대한 표현을 요청자에게 전송할 수 있다.

  구성
    자원 Resource : URI
    행위 Method : GET, POST, PATCH, PUT, DELETE, OPTIONS...
    표현 Representation
  
  특징
    Uniform (인터페이스)
      URI 로 지정된 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행
      수신된 표현을 클라이언트에서 조작
      클라이언트에서 전송된 표현과 분리
    Stateless
      API 서버는 요청만 단순히 처리
      작업을 위한 상태정보를 따로 저장하지 않음
      불필요한 정보는 관리하지 않아 서비스의 자유도를 높임
    Cacheable
      HTTP 웹 표준을 그대로 따르기 때문에 웹 인프라를 그대로 활용
      HTTP 프로토콜에서 사용하는 Last-Modified, E-tag 를 활용하여 캐싱 현 가능
    Self-descriptiveness
      REST API를 보고 의미를 이해 할 수있는 표현 만들기를 지향
    Client-Server 구조
      서버간 역할이 확실하게 구분하여 상호간 의존성을 줄임
    계층형 구조
      다중 계층으로 구성하여 구조상 유연성을 추구
      (보안, 로드벨런싱, 암호화 계층 등등)

  디자인 가이드
    URI 는 정보의 자원을 표현해야 함
      리소스명은 명사를 사용
      / 는 계층 관계를 나타내는데 사용
      - 을 통해 가독성을 높임 _은 사용하지 않음(주소에서 가독성 떨어짐)
      경로는 소문자로 사용
      파일 확장자는 사용하지 않음, Accept header를 사용해서 확장자 표기

    자원에 대한 행위는 HTTP Method 로 표현함
      GET, POST, PUT, PATCH, DELETE, OPTION ...
      DELETE, OPTION 는 보안상 이유로 사용 자제

*다른 플랫폼에서 사용하기 위해 URI는 플랫폼 중립적이어야 한다.
  모바일에서 요청시 request header의 User-Agent 값 활용을 권함

위와 같은 아키텍처를 잘 준수하여 만든 API 를 Restful한 API 라고 한다.