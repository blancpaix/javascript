굉장히 좆같은 새기들이네 자기들이 책임을 지고 번역을 해야 하는데 개덕같이 써놓고 이거 일긍라고 함녀 뭐 말이되나
설명도 좆같이 못해놧네

브라우저
  기능 : 자원을 브라우저에 표현, 자원 요청

  주요 구성 요소
    사용자 인터페이스
    브라우저 엔진
    렌더링 엔진
    통신
    UI 백엔드
    JS 해석기
    자료 저장소 - 쿠키, 웹, 세션 스토리지 등등
  

렌더링 엔진
  역할 : HTML 문서와 기타 자원을 브라우저에 상호작용적인 시각 표헌으로 변환시키는 것
  주로 사용되는 브라우저의 렌더링 엔진
    Gecko : 파아어폭스
    Webkit : 사파리, 크롬

  동작 과정
    통신으로 요청한 문서의 내용을 얻음으로 시작, 문서의 내용은 보통 8kb 단위로 전송된다

  동작 순서
    1. DOM 트리 구축을 위한 HTML 파싱 : 태그를 dOM 노드로 변환
    2. 렌더 트리 생성 : CSS/style 데이터 파싱 => 스타일 지정
    3. 렌더 트리 배치 : position, size 부여
    4. 렌더 트리 그리기

    1. DOM 트리 생성
      html 문서를 받아서 파싱하여 태그들을 DOM 노드로 변환

      파싱 : 브라우저가 코드를 사용할 수 있는 구조로 변환하는 것
        어휘 분석 : 자료를 토큰으로 분해하는 과정, 의미없는 문자 제거
        구문 분석 : 언어의 구문 규칙을 적용하는 과정

        규칙에 일치 => 토큰에 해당하는 노드가 파싱트리에 추가됨, 다음 토큰 요청
        규칙에 비일치 => 토큰 내부적으로 저장, 다음 토큰 요청, 규칙에 맞는것이 없느면 오류 반환
      
      변환 : 파싱 트리 생성 후 컴파일러를 통해 기계 코드로 문서를 변환

      * 가상 DOM
        변경사항이 생기면 DOM을 직접 조작하여 브라우저에 반영, 실시간으로 렌더 트리가 갱신됨
        대신 모든 변경사항을 가상 돔에 만들어내 한번의 렌더트리를 만듦 => 렌더링 횟수 줄임

      => HTML문서를 파싱하고 기계가 읽을 수 있도록 컴파일러를 거침

    2. 렌더 트리 구축
      DOM 트리가 구축되는 동안 브라우저는 렌더 트리를 구축
      렌더 트리 구축 과정
        DOM 트리의 루트에서 시작해서 각 노드를 읽으며 구축함 
          비 시각적 요소는 렌더 트리에 추가되지 않는다. ex) {display : none}
        CSS 마크업을 처리, CSSOM 트리를 빌드함 (CSSOM : CSS Object Model)
        DOM 과 CSSOM 을 결합하여 렌더링 트리를 만듦

        => DOM 과 CSSOM 을 결합하여 화면에 그려낼 내용을 만들어낸다.

    3. 렌더 트리 배치
      형상이 생성되어 트리가 만들어질때는 크기와 위치에 대한 정보가 없다.
      형상의 크기나 위치에 대한 계산은 <html> 요소에 해당하는 최상위 형상에서 시작된다. 반복하며 layout 을 구성한다.
      
      layout을 구성하며 재배치가 필요한 변경요소는 "더티"라고 한다.

      => 각 요소의 크기와 위치를 계산한다.

    4. 렌더 트리 그리기
      화면에 내용을 표시하기 위해 렌더 트리가 탐색되며 요소를 실제 픽셀로 변환하여 그린다.
      
      => 위의 과정에서 만들어진 요소들을 배치한다.

  
     
